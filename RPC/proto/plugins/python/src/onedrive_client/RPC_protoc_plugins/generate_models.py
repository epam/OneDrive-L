#!/usr/bin/env python
"""Protobuf plugin that generates DTO objects and related enums.

Refer to this page for information about Protobuf plugins:

    https://developers.google.com/protocol-buffers/docs/reference/other#plugins
"""
import re
from os import path

from .utils import Entrypoint
import logbook
import yaml
import mako.template
import mako.exceptions


LOGGER = logbook.Logger('RPC_models')


TEMPLATES_PATH = path.join(path.dirname(path.abspath(__file__)), 'templates')

MODEL_TEMPLATE = mako.template.Template(
    filename=path.join(TEMPLATES_PATH, 'model.mako')
)


def _generate_models(request, response):
    """Generate messages and enums.

    The plugin is supposed to be used in conjunction with the standard
    Protobuf plugin because it reuses descriptor generated by it.
    """
    file_descriptor_proto = next(
        f for f in request.proto_file
        if f.name == 'onedrive_client/RPC/RPC.proto'
    )
    assert file_descriptor_proto.name in request.file_to_generate

    event_descriptor_proto = next(
        e for e in file_descriptor_proto.enum_type
        if e.name == 'Event'
    )
    Event = {value.name: value.number for value in event_descriptor_proto.value}
    action_descriptor_proto = next(
        e for e in file_descriptor_proto.enum_type
        if e.name == 'Action'
    )
    Action = {
        value.name: value.number
        for value in action_descriptor_proto.value
    }
    models = next(
        value
        for descriptor, value in
        file_descriptor_proto.options.ListFields()
        if descriptor.name == 'models'
    )

    model_dir = path.join(path.dirname(file_descriptor_proto.name), 'models')
    for model in models:
        try:
            content = MODEL_TEMPLATE.render(
                model=model,
                Event=Event,
                Action=Action,
                SOURCE_PATH=file_descriptor_proto.name
            )
        except:
            LOGGER.error(
                mako.exceptions.text_error_template().render()
            )
            raise
        model_filename = re.sub('[- ]', '_', model.id.lower()) + '.py'
        model_filepath = path.join(model_dir, model_filename)

        output_file = response.file.add()
        output_file.name = model_filepath
        output_file.content = content

        LOGGER.info('Writing model to file "{}".', model_filepath)


main = Entrypoint(_generate_models)
