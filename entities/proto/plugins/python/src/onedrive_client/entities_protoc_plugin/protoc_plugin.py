#!/usr/bin/env python
"""Protobuf plugin that generates DTO objects and related enums.

Refer to this page for information about Protobuf plugins:

https://developers.google.com/protocol-buffers/docs/reference/other#plugins
"""
from os import path
import sys

from google.protobuf.compiler import plugin_pb2 as plugin
import logbook
from mako.template import Template


LOGGER = logbook.Logger('entities')


TEMPLATES_PATH = path.join(path.dirname(path.abspath(__file__)), 'templates')

MESSAGES_TEMPLATE = Template(
    filename=path.join(TEMPLATES_PATH, 'messages.mako')
)


def generate(request, response):
    """Generate messages and enums.

    The plugin is supposed to be used in conjunction with the standard
    Protobuf plugin because it reuses descriptor generated by it.
    """
    for file_descriptor in request.proto_file:
        LOGGER.info('Processing "{}".', file_descriptor.name)
        if file_descriptor.name not in request.file_to_generate:
            LOGGER.info(
                'File "{}" is not supposed to be processed, skipping.',
                file_descriptor.name
            )
            continue

        target_dir = path.dirname(path.normpath(
            file_descriptor.name
        ))
        filename, _ = path.splitext(path.basename(file_descriptor.name))

        pb_module = filename + '_pb2'
        content = MESSAGES_TEMPLATE.render(
            PB_MODULE=pb_module,
            FILE_DESCRIPTOR=file_descriptor
        )

        target_path = path.join(target_dir, filename + '.py')

        output_file = response.file.add()
        output_file.name = target_path
        output_file.content = content

        LOGGER.info('Writing file "{}".', target_path)


def main():
    """Plugin entrypoint."""
    with logbook.StderrHandler().applicationbound():
        # Read request message from stdin
        data = sys.stdin.buffer.read()

        # Parse request
        request = plugin.CodeGeneratorRequest()
        request.ParseFromString(data)

        # Create response
        response = plugin.CodeGeneratorResponse()

        # Generate code
        generate(request, response)

        # Serialise response message
        output = response.SerializeToString()

        # Write to stdout
        sys.stdout.buffer.write(output)


if __name__ == '__main__':
    main()
